`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// AY1718 Sem 1 EE2020 Project
// Project Name: Audio Effects
// Module Name: AUDIO_FX_TOP
// Team No.: 
// Student Names: 
// Matric No.:
// Description: 
// 
// Work Distribution:
//////////////////////////////////////////////////////////////////////////////////

module AUDIO_FX_TOP(
    input CLOCK,            // 100MHz FPGA clock
    input pb,               // pushbutton for variable delay
    input [7:0]sw,          // switches for piano
    input switch,           // switch to choose piano or mic
    input U,                // UP octave pushbutton
    input D,                // DOWN octave pushbutton
    input loopswitch,       // switch for loop
    
    input  J_MIC3_Pin3,   // PmodMIC3 audio input data (serial)
    output J_MIC3_Pin1,   // PmodMIC3 chip select, 20kHz sampling clock
    output J_MIC3_Pin4,   // PmodMIC3 serial clock (generated by module SPI.v)
     
    output J_DA2_Pin1,    // PmodDA2 sampling clock (generated by module DA2RefComp.vhd)
    output J_DA2_Pin2,    // PmodDA2 Data_A, 12-bit speaker output (generated by module DA2RefComp.vhd)
    output J_DA2_Pin3,    // PmodDA2 Data_B, not used (generated by module DA2RefComp.vhd)
    output J_DA2_Pin4,     // PmodDA2 serial clock, 50MHz clock
    output [2:0]led      // leds to show delay secs
    );

    //////////////////////////////////////////////////////////////////////////////////
    // Clock Divider Module: Generate necessary clocks from 100MHz FPGA CLK
    // Please create the clock divider module and instantiate it here.
      wire clk_20k;
      wire clk_50M;
      wire clk_20hz;
      clk_gen u1(CLOCK, clk_20k, clk_50M, clk_20hz);
      
  
     //////////////////////////////////////////////////////////////////////////////////
     //SPI Module: Converting serial data into a 12-bit parallel register
     //Do not change the codes in this area
       wire [11:0]MIC_in;
       SPI u2 (CLOCK, clk_20k, J_MIC3_Pin3, J_MIC3_Pin1, J_MIC3_Pin4, MIC_in);
   
    /////////////////////////////////////////////////////////////////////////////////////
    // Real-time Audio Effect Features
    // Please create modules to implement different features and instantiate them here   
      wire [11:0] speaker_out;
      wire pb_signal;
      wire pulse1;
      wire pulse2;
      wire [11:0] speaker1;
      wire [11:0] speaker2;
      wire [11:0] speaker3;
      
      debouncing u3(clk_20hz, pb, pb_signal);
      mic_delay_5sec u4(pb_signal, clk_20k, MIC_in, speaker1, led);
      debouncing u6(clk_20hz, U, pulse1);
      debouncing u7(clk_20hz, D, pulse2);
      determinenote u8(pulse1,pulse2,sw,clk_20k,speaker2);
      assign speaker3 = (switch) ? speaker1 : speaker2;
      loop u9(loopswitch, clk_20k, speaker3, speaker_out);
      //mic_delay u4(pb_signal, clk_20k, MIC_in, speaker_out, led);
     
     
    /////////////////////////////////////////////////////////////////////////////////////
    //DAC Module: Digital-to-Analog Conversion
    //Do not change the codes in this area        
      DA2RefComp u5(clk_50M, clk_20k, speaker_out, ,1'b0, J_DA2_Pin2, J_DA2_Pin3, J_DA2_Pin4, J_DA2_Pin1,);
        
  //////////////////////////////////////////////////////////////////////////////////

endmodule
